{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "40Yb47zJQglm"
   },
   "source": [
    "## Simulation-Based Inference SIR Model: Training (critical value)\n",
    "Created: May 23, 2022 Prosper and Prosper<br>\n",
    "Updated: Apr 05, 2023 HBP<br>\n",
    "Updated: Oct 30, 2023 HBP\n",
    "\n",
    "### Introduction \n",
    "\n",
    "The purpose of this notebook is to approximate $\\mathbb{P}(\\lambda \\le \\lambda_0 | \\theta) = \\mathbb{E}(Z | \\theta)$ in two different ways: 1) using a 2D histogram and 2) a neural network, where for a given hypothesis $H_0: \\theta = \\theta_0$ versus $H_1: \\theta \\ne \\theta_0$, $\\lambda_0$ is the observed value of the test statistic $\\lambda$ (see SIR_generate_data.ipynb for details.)\n",
    "\n",
    "Our test statistic $\\lambda$  is large for parameters $\\theta$ *disfavored* by the data, whereas in the algorithm of Ref.[1], a modified version of which we use, $\\lambda$ is small for disfavored parameters. Therefore, we're approximating the cumulative distribution function (cdf) rather than the p-value. \n",
    "\n",
    "The stochastic forward simulator $F_\\theta$ is the CTMC simulator in notebook SIR_generate_data.ipynb, which simulates the ensemble of synthetic epidemics.\n",
    "\n",
    "\n",
    "### Approximating $\\mathbb{P}(\\lambda \\le \\lambda_0 | \\theta) = \\mathbb{E}(Z | \\theta)$ by histogramming\n",
    "\n",
    "The quantity $\\mathbb{E}(Z | \\theta)$ can be approximated using the following algorithm, which therefore provides a way to check the quality of the deep neural network model.\n",
    "\n",
    "$\\theta = \\alpha, \\beta$\n",
    "\n",
    "  1. Create histogram $h_w \\gets \\text{histogram}(\\alpha, \\beta, \\text{weight}=Z)$\n",
    "  1. Create histogram $h_u \\gets \\text{histogram}(\\alpha, \\beta, \\text{weight}=1)$\n",
    "  1. Approximate $\\mathbb{P}(\\lambda \\le \\lambda_0 | \\alpha, \\beta)$ by $h_w \\, / \\, h_u$\n",
    "\n",
    "### References\n",
    "  1. Anne Lee *et al.*, https://arxiv.org/abs/2107.03920"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "FA1Y5VCv20XZ"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "device: cuda\n"
     ]
    }
   ],
   "source": [
    "import os, sys\n",
    "\n",
    "sys.path.append('../')\n",
    "\n",
    "# the standard module for tabular data\n",
    "import pandas as pd\n",
    "\n",
    "# the standard module for array manipulation\n",
    "import numpy as np\n",
    "\n",
    "# the standard modules for high-quality plots\n",
    "import matplotlib as mp\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# standard scientific python module\n",
    "import scipy as sp\n",
    "import scipy.stats as st\n",
    "import scipy.optimize as op\n",
    "\n",
    "# module to save results\n",
    "#import joblib as jb\n",
    "\n",
    "# pytorch\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "# split data into a training set and a test set\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# to reload modules\n",
    "import importlib\n",
    "\n",
    "import SIR_dnn_util as ut\n",
    "from SIR_gen_util import Fsolve, test_statistic, SIRdata\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# update fonts\n",
    "FONTSIZE = 18\n",
    "font = {'family' : 'serif',\n",
    "        'weight' : 'normal',\n",
    "        'size'   : FONTSIZE}\n",
    "mp.rc('font', **font)\n",
    "\n",
    "# set usetex = False if LaTex is not \n",
    "# available on your system or if the \n",
    "# rendering is too slow\n",
    "mp.rc('text', usetex=True)\n",
    "\n",
    "# set a seed to ensure reproducibility\n",
    "seed = 128\n",
    "rnd  = np.random.RandomState(seed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "device  = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "device(type='cuda')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "device"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "NJC916BU-9L6"
   },
   "source": [
    "### Define model $f(\\alpha, \\beta, \\lambda; \\omega)$\n",
    "\n",
    "For simple models, it is sufficient to use the __Sequential__ class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overwriting ../models/SIR_dnn_quantile.py\n"
     ]
    }
   ],
   "source": [
    "%%writefile ../models/SIR_dnn_quantile.py\n",
    "\n",
    "name     = 'SIR_dnn_quantile'\n",
    "features = ['alpha', 'beta', 'tau']\n",
    "target   = 'lo'\n",
    "nodes    = 25\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "model = nn.Sequential(nn.Linear( len(features), nodes),\n",
    "                      nn.ReLU(),\n",
    "                      \n",
    "                      nn.Linear(nodes, nodes),\n",
    "                      nn.ReLU(),\n",
    "                      \n",
    "                      nn.Linear(nodes, nodes),\n",
    "                      nn.ReLU(), \n",
    "                      \n",
    "                      nn.Linear(nodes, nodes),\n",
    "                      nn.ReLU(),                    \n",
    "                      \n",
    "                      nn.Linear(nodes, nodes),\n",
    "                      nn.ReLU(), \n",
    "                      \n",
    "                      nn.Linear(nodes, nodes),\n",
    "                      nn.ReLU(),                    \n",
    "                      \n",
    "                      nn.Linear(nodes, 1)\n",
    "                     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SIR_dnn_quantile\n",
      "Sequential(\n",
      "  (0): Linear(in_features=3, out_features=25, bias=True)\n",
      "  (1): ReLU()\n",
      "  (2): Linear(in_features=25, out_features=25, bias=True)\n",
      "  (3): ReLU()\n",
      "  (4): Linear(in_features=25, out_features=25, bias=True)\n",
      "  (5): ReLU()\n",
      "  (6): Linear(in_features=25, out_features=25, bias=True)\n",
      "  (7): ReLU()\n",
      "  (8): Linear(in_features=25, out_features=25, bias=True)\n",
      "  (9): ReLU()\n",
      "  (10): Linear(in_features=25, out_features=25, bias=True)\n",
      "  (11): ReLU()\n",
      "  (12): Linear(in_features=25, out_features=1, bias=True)\n",
      ")\n",
      "number of parameters: 3376\n"
     ]
    }
   ],
   "source": [
    "import models.SIR_dnn_quantile as NN\n",
    "importlib.reload(NN)\n",
    "name     = NN.name\n",
    "model    = NN.model#.to(device)\n",
    "features = NN.features\n",
    "target   = NN.target\n",
    "modelfile  = '%s.dict' % NN.name\n",
    "print(name)\n",
    "print(model)\n",
    "print('number of parameters: %d' % ut.number_of_parameters(model))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load data\n",
    "\n",
    "__Note__: The $\\alpha$ and $\\beta$ parameters have been scaled so that they are of $\\cal{O}(1)$. Therefore, no further transformation is needed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SIRdata\n",
      " D           : [  3  25  75 227 296 258 236 192 126  71  28  11   7]\n",
      " I0          : 3\n",
      " O           : [  3  25  75 227 296 258 236 192 126  71  28  11   7]\n",
      " R0          : 0\n",
      " S0          : 763\n",
      " T           : [ 0  2  3  4  5  6  7  8  9 10 11 12 13]\n",
      " alpha0      : 0.465\n",
      " alpha_bins  : 16\n",
      " alpha_max   : 0.9\n",
      " alpha_min   : 0.1\n",
      " alpha_scale : 1.0\n",
      " beta0       : 0.00237\n",
      " beta_bins   : 16\n",
      " beta_max    : 0.65\n",
      " beta_min    : 0.25\n",
      " beta_scale  : 0.005\n",
      " model       : SIR\n",
      " scale       : 50\n",
      " tmax        : 14.0\n",
      " tmin        : 0.0\n",
      "\n",
      "\n",
      "loading ../data/SIR_traindata_100k.csv.gz\n",
      "number of rows: 100000\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alpha</th>\n",
       "      <th>beta</th>\n",
       "      <th>li</th>\n",
       "      <th>lo</th>\n",
       "      <th>l0</th>\n",
       "      <th>Zo</th>\n",
       "      <th>Z0</th>\n",
       "      <th>i</th>\n",
       "      <th>I</th>\n",
       "      <th>tau</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.556824</td>\n",
       "      <td>0.432547</td>\n",
       "      <td>0.017546</td>\n",
       "      <td>0.455190</td>\n",
       "      <td>0.068463</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>[3, 13, 65, 134, 222, 229, 200, 153, 99, 69, 4...</td>\n",
       "      <td>[3.0, 25.41, 66.24, 140.76, 212.17, 226.2, 190...</td>\n",
       "      <td>0.234051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.917183</td>\n",
       "      <td>0.617733</td>\n",
       "      <td>0.110494</td>\n",
       "      <td>0.172180</td>\n",
       "      <td>0.323215</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>[3, 3, 27, 71, 151, 170, 106, 63, 42, 20, 8, 4...</td>\n",
       "      <td>[3.0, 46.43, 126.68, 188.65, 160.33, 101.22, 5...</td>\n",
       "      <td>0.403957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.222595</td>\n",
       "      <td>0.684092</td>\n",
       "      <td>0.020499</td>\n",
       "      <td>0.309478</td>\n",
       "      <td>0.178384</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>[3, 286, 527, 507, 413, 337, 273, 222, 172, 14...</td>\n",
       "      <td>[3.0, 232.07, 521.39, 511.27, 423.76, 341.88, ...</td>\n",
       "      <td>0.231190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.513685</td>\n",
       "      <td>0.231400</td>\n",
       "      <td>0.054771</td>\n",
       "      <td>1.783674</td>\n",
       "      <td>0.630670</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>[3, 4, 6, 2, 5, 8, 7, 13, 29, 44, 50, 67, 85]</td>\n",
       "      <td>[3.0, 6.22, 8.89, 12.59, 17.59, 24.14, 32.47, ...</td>\n",
       "      <td>0.489115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.533168</td>\n",
       "      <td>0.343659</td>\n",
       "      <td>0.057785</td>\n",
       "      <td>0.553024</td>\n",
       "      <td>0.198700</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>[3, 20, 41, 85, 160, 186, 172, 156, 124, 90, 6...</td>\n",
       "      <td>[3.0, 13.87, 28.69, 55.72, 97.06, 143.04, 172....</td>\n",
       "      <td>0.816578</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      alpha      beta        li        lo        l0   Zo   Z0  \\\n",
       "0  0.556824  0.432547  0.017546  0.455190  0.068463  1.0  1.0   \n",
       "1  0.917183  0.617733  0.110494  0.172180  0.323215  1.0  1.0   \n",
       "2  0.222595  0.684092  0.020499  0.309478  0.178384  1.0  1.0   \n",
       "3  0.513685  0.231400  0.054771  1.783674  0.630670  1.0  1.0   \n",
       "4  0.533168  0.343659  0.057785  0.553024  0.198700  1.0  1.0   \n",
       "\n",
       "                                                   i  \\\n",
       "0  [3, 13, 65, 134, 222, 229, 200, 153, 99, 69, 4...   \n",
       "1  [3, 3, 27, 71, 151, 170, 106, 63, 42, 20, 8, 4...   \n",
       "2  [3, 286, 527, 507, 413, 337, 273, 222, 172, 14...   \n",
       "3      [3, 4, 6, 2, 5, 8, 7, 13, 29, 44, 50, 67, 85]   \n",
       "4  [3, 20, 41, 85, 160, 186, 172, 156, 124, 90, 6...   \n",
       "\n",
       "                                                   I       tau  \n",
       "0  [3.0, 25.41, 66.24, 140.76, 212.17, 226.2, 190...  0.234051  \n",
       "1  [3.0, 46.43, 126.68, 188.65, 160.33, 101.22, 5...  0.403957  \n",
       "2  [3.0, 232.07, 521.39, 511.27, 423.76, 341.88, ...  0.231190  \n",
       "3  [3.0, 6.22, 8.89, 12.59, 17.59, 24.14, 32.47, ...  0.489115  \n",
       "4  [3.0, 13.87, 28.69, 55.72, 97.06, 143.04, 172....  0.816578  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('SIRdata')\n",
    "data = SIRdata\n",
    "data.alpha_min,  data.alpha_max = 0.10, 0.90\n",
    "data.beta_min,   data.beta_max  = 0.25, 0.65\n",
    "print(data)\n",
    "print()\n",
    "\n",
    "datafile = '../data/SIR_traindata_100k.csv.gz'\n",
    "\n",
    "print('loading %s' % datafile)\n",
    "df = pd.read_csv(datafile)\n",
    "df['tau'] = np.random.uniform(0,1, len(df))\n",
    "print('number of rows:', len(df))\n",
    "\n",
    "df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_data(d, filename='../images/fig_SIR_flu_data.pdf', fgsize=(5, 4), ftsize=14):\n",
    "    \n",
    "    fig, ax = plt.subplots(nrows=1, ncols=1, figsize=fgsize)\n",
    "    \n",
    "    # pad\n",
    "    #plt.subplots_adjust(hspace=0.01)\n",
    "    #plt.subplots_adjust(wspace=0.3)\n",
    "\n",
    "    #\n",
    "    xmin, xmax = 0,  18\n",
    "    ymin, ymax = 0, 400\n",
    "\n",
    "    ax.set_xlim(xmin, xmax)\n",
    "    ax.set_xlabel(r'$t$ (day)', fontsize=ftsize)\n",
    "    \n",
    "    ax.set_ylim(ymin, ymax)\n",
    "    ax.set_ylabel(r'infected (count)', fontsize=ftsize)\n",
    "    \n",
    "    ax.scatter(d.T, d.D, s=20, c='black', \n",
    "               label=r'number of individuals in class $I$')\n",
    "    ax.legend(fontsize=14)\n",
    "               \n",
    "    ax.grid() \n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.savefig(filename)\n",
    "    print(filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "../images/fig_SIR_flu_data.pdf\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_data(SIRdata)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train, validation, and test sets\n",
    "There is some confusion in terminology regarding validation and test samples (or sets). We shall adhere to the defintions given here https://machinelearningmastery.com/difference-test-validation-datasets/):\n",
    "   \n",
    "  * __Training Dataset__: The sample of data used to fit the model.\n",
    "  * __Validation Dataset__: The sample of data used to decide 1) whether the fit is reasonable (e.g., the model has not been overfitted), 2) decide which of several models is the best and 3) tune model hyperparameters.\n",
    "  * __Test Dataset__: The sample of data used to provide an unbiased evaluation of a final model fit on the training dataset.\n",
    "\n",
    "The validation set will be some small fraction of the training set and can be used, for example, to decide when to stop the training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train set size:         80000\n",
      "validation set size:     5000\n",
      "test set size:          15000\n",
      "    0\n",
      "saved to file: fig_hist_SIR_dnn_quantile.png\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Fraction of the data assigned as test data and validation\n",
    "tfraction = 1.5/10 # test fraction, rest for training\n",
    "vfraction = 5/85\n",
    "tdata     = df\n",
    "\n",
    "SIRdata.alpha_bins = 10\n",
    "SIRdata.beta_bins  = 10\n",
    "\n",
    "# Split data into a part for training and a part for testing\n",
    "train_data, valid_data, test_data = ut.split_data(df, \n",
    "                                         test_fraction=tfraction, \n",
    "                                         validation_fraction=vfraction) \n",
    "\n",
    "print('train set size:        %6d' % train_data.shape[0])\n",
    "print('validation set size:   %6d' % valid_data.shape[0])\n",
    "print('test set size:         %6d' % test_data.shape[0])\n",
    "\n",
    "def smooth_hist(tfraction=2/3, K=1, d=SIRdata):\n",
    "    P = np.zeros((data.alpha_bins, d.beta_bins))\n",
    "    for k in range(K):\n",
    "        print('\\r%5d' % k, end='')\n",
    "        _, test   = train_test_split(df, \n",
    "                                 test_size=tfraction, \n",
    "                                 shuffle=True)\n",
    "        p, xe, ye = ut.hist_data(test, SIRdata)\n",
    "        P += p\n",
    "    print()\n",
    "    P /= K\n",
    "    return P, xe, ye\n",
    "\n",
    "hist = smooth_hist()\n",
    "\n",
    "ut.plot_model(tdata, SIRdata, \n",
    "              filename='fig_hist_%s.png' % NN.name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Empirical risk (that is, average loss)\n",
    "\n",
    "The empirical risk, which is the __objective function__ we shall minimize, is defined by\n",
    "\n",
    "\\begin{align}\n",
    "R_M(\\theta) & = \\frac{1}{M} \\sum_{m=1}^{M} L(t_m, f_m),\n",
    "\\end{align}\n",
    "\n",
    "where \n",
    "\n",
    "\\begin{align*}\n",
    "    f_m & \\equiv f(\\mathbf{x}_m, \\theta).\n",
    "\\end{align*}\n",
    "\n",
    "The empirical risk $R_M$ approximates the __risk functional__\n",
    "\n",
    "\\begin{align}\n",
    "R[f] & = \\int \\cdots \\int \\, p(t, \\mathbf{x}) \\, L(t, f(\\mathbf{x}, \\theta)) \\, dt \\, d\\mathbf{x} .\n",
    "\\end{align}\n",
    "\n",
    "The quantity $p(t, \\mathbf{x}) \\, dt\\, d\\mathbf{x}$ is the probability distribution from which the sample $\\{ (t_m, \\mathbf{x}_m), m = 1,\\cdots, M \\}$ is presumed to have been drawn. \n",
    "\n",
    "We use the __quadratic loss__\n",
    "\n",
    "$$\n",
    "    \\ell_{\\tau}(y, \\hat{y}) \\begin{align}\n",
    "    &=\n",
    "    \\begin{cases}\n",
    "        \\tau (y - \\hat{y} ), \\qquad & \\text{if } y> \\hat{y} \\\\\n",
    "         (1-\\tau) (\\hat{y}-y), \\qquad &\\text{otherwise}\n",
    "    \\end{cases}\n",
    "    \\end{align}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "traces = ([], [], [])\n",
    "traces_step = 100\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "        \n",
    "def train(model, optimizer, dictfile, early_stopping_count,\n",
    "          avloss, getbatch,\n",
    "          train_data, valid_data, \n",
    "          features, target,\n",
    "          batch_size,\n",
    "          n_iterations, \n",
    "          traces, \n",
    "          step=10):\n",
    "    \n",
    "    #model.to(device)\n",
    "    \n",
    "    train_x, train_t = split_source_target(train_data, \n",
    "                                           features, target)\n",
    "    \n",
    "    valid_x, valid_t = split_source_target(valid_data, \n",
    "                                           features, target)\n",
    "    \n",
    "    # to keep track of average losses\n",
    "    xx, yy_t, yy_v = traces\n",
    "    \n",
    "    # save model with smallest validation loss\n",
    "    # if after early_stopping_count iterations \n",
    "    # no validation scores are lower than the\n",
    "    # current lowest value.\n",
    "    min_acc_v = 1.e30\n",
    "    stopping_count = 0\n",
    "    jjsaved = 0\n",
    "    \n",
    "    n = len(valid_x)\n",
    "    \n",
    "    print('Iteration vs average loss')\n",
    "    print(\"%9s %9s %9s\" % \\\n",
    "          ('iteration', 'train-set', 'valid-set'))\n",
    "    \n",
    "    for ii in range(n_iterations):\n",
    "                \n",
    "        stopping_count += 1\n",
    "            \n",
    "        # set mode to training so that training specific \n",
    "        # operations such as dropout are enabled.\n",
    "        model.train()\n",
    "        \n",
    "        # get a random sample (a batch) of data (as numpy arrays)\n",
    "        batch_x, batch_t = getbatch(train_x, train_t, batch_size)\n",
    "        \n",
    "        # convert the numpy arrays batch_x and batch_t to tensor \n",
    "        # types. The PyTorch tensor type is the magic that permits \n",
    "        # automatic differentiation with respect to parameters. \n",
    "        # However, since we do not need to take the derivatives\n",
    "        # with respect to x and t, we disable this feature\n",
    "        with torch.no_grad(): # no need to compute gradients \n",
    "            # wrt. x and t\n",
    "            x = torch.from_numpy(batch_x).float()#.to(device)\n",
    "            t = torch.from_numpy(batch_t).float()#.to(device)\n",
    "            #x.to(device)\n",
    "            #t.to(device)\n",
    "            \n",
    "        # compute the output of the model for the batch of data x\n",
    "        # Note: outputs is \n",
    "        #   of shape (-1, 1), but the tensor targets, t, is\n",
    "        #   of shape (-1,)\n",
    "        # In order for the tensor operations with outputs and t\n",
    "        # to work correctly, it is necessary that they have the\n",
    "        # same shape. We can do this with the reshape method.\n",
    "        outputs = model(x).reshape(t.shape)#.to(device)\n",
    "        #outputs.to(device)\n",
    "        \n",
    "        # compute a noisy approximation to the average loss\n",
    "        empirical_risk = avloss(outputs, t, x)\n",
    "        \n",
    "        # use automatic differentiation to compute a \n",
    "        # noisy approximation of the local gradient\n",
    "        optimizer.zero_grad()       # clear previous gradients\n",
    "        empirical_risk.backward()   # compute gradients\n",
    "        \n",
    "        # finally, advance one step in the direction of steepest \n",
    "        # descent, using the noisy local gradient. \n",
    "        optimizer.step()            # move one step\n",
    "        acc_t = validate(model, avloss, train_x[:n], train_t[:n]) \n",
    "        \n",
    "        if ii % step == 0:\n",
    "            \n",
    "            acc_t = validate(model, avloss, train_x[:n], train_t[:n]) \n",
    "            acc_v = validate(model, avloss, valid_x[:n], valid_t[:n])\n",
    "            \n",
    "            if acc_v < min_acc_v:\n",
    "                min_acc_v = acc_v\n",
    "                torch.save(model.state_dict(), dictfile)\n",
    "                stopping_count = 0\n",
    "                jjsaved = ii\n",
    "            else:\n",
    "                if stopping_count > early_stopping_count:\n",
    "                    print('\\n\\nstopping early!')\n",
    "                    break\n",
    "                    \n",
    "            if len(xx) < 1:\n",
    "                xx.append(0)\n",
    "                print(\"%9d %9.7f %9.7f\" % (xx[-1], acc_t, acc_v))\n",
    "            elif len(xx) < 5:\n",
    "                xx.append(xx[-1] + step)\n",
    "                print(\"%9d %9.7f %9.7f\" % (xx[-1], acc_t, acc_v))\n",
    "            else:\n",
    "                xx.append(xx[-1] + step)\n",
    "                saved = ' %9d: %9d/%10.8f/%9d' % \\\n",
    "                (ii, jjsaved, min_acc_v, stopping_count)\n",
    "                print(\"\\r%9d %9.7f %9.7f%s\" % \\\n",
    "                      (xx[-1], acc_t, acc_v, saved), end='')\n",
    "                \n",
    "            yy_t.append(acc_t)\n",
    "            yy_v.append(acc_v)\n",
    "                \n",
    "    print()\n",
    "    \n",
    "    model.load_state_dict(torch.load(dictfile))\n",
    "    return (xx, yy_t, yy_v)\n",
    "\n",
    "def split_source_target(df, source, target):\n",
    "    # change from pandas dataframe format to a numpy \n",
    "    # array of the specified types\n",
    "    x = np.array(df[source])\n",
    "    t = np.array(df[target])\n",
    "    return x, t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'traces' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_2281/3939368715.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     15\u001b[0m                   \u001b[0mn_batch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m                   \u001b[0mn_iterations\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m                   \u001b[0mtraces\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m                   step=traces_step)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'traces' is not defined"
     ]
    }
   ],
   "source": [
    "n_batch       = 50\n",
    "n_iterations  = 50000\n",
    "early_stopping= 2000\n",
    "learning_rate = 1.e-3\n",
    "\n",
    "optimizer     = torch.optim.Adam(model.parameters(), \n",
    "                                 lr=learning_rate) \n",
    "\n",
    "traces = ut.train(model, optimizer, \n",
    "                  modelfile, early_stopping,\n",
    "                  ut.average_quantile_loss,\n",
    "                  ut.get_batch, \n",
    "                  train_data, valid_data,\n",
    "                  features, target,\n",
    "                  n_batch, \n",
    "                  n_iterations,\n",
    "                  traces,\n",
    "                  step=traces_step)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration vs average loss\n",
      "iteration train-set valid-set\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "cannot unpack non-iterable NoneType object",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_409/538087474.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0mlearning_rate\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1.e-4\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m traces = train(model, optimizer, \n\u001b[0m\u001b[1;32m     26\u001b[0m                   \u001b[0mmodelfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mearly_stopping\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m                   \u001b[0mut\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maverage_quantile_loss\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/tmp/ipykernel_409/146901967.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(model, optimizer, dictfile, early_stopping_count, avloss, getbatch, train_data, valid_data, features, target, batch_size, n_iterations, traces, step)\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0;31m# to keep track of average losses\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m     \u001b[0mxx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myy_t\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myy_v\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtraces\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m     \u001b[0;31m# save model with smallest validation loss\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: cannot unpack non-iterable NoneType object"
     ]
    }
   ],
   "source": [
    "n_batch       = 50\n",
    "n_iterations  = 50000\n",
    "early_stopping= 2000\n",
    "learning_rate = 1.e-3\n",
    "\n",
    "optimizer     = torch.optim.Adam(model.parameters(), \n",
    "                                 lr=learning_rate) \n",
    "\n",
    "traces = train(model, optimizer, \n",
    "                  modelfile, early_stopping,\n",
    "                  ut.average_quantile_loss,\n",
    "                  ut.get_batch, \n",
    "                  train_data, valid_data,\n",
    "                  features, target,\n",
    "                  n_batch, \n",
    "                  n_iterations,\n",
    "                  traces,\n",
    "                  step=traces_step)\n",
    "\n",
    "n_batch       = 500\n",
    "n_iterations  = 50000\n",
    "early_stopping= 2000\n",
    "learning_rate = 1.e-4\n",
    "\n",
    "traces = train(model, optimizer, \n",
    "                  modelfile, early_stopping,\n",
    "                  ut.average_quantile_loss,\n",
    "                  ut.get_batch, \n",
    "                  train_data, valid_data,\n",
    "                  features, target,\n",
    "                  n_batch, \n",
    "                  n_iterations,\n",
    "                  traces,\n",
    "                  step=traces_step)\n",
    "\n",
    "ut.plot_average_loss(traces)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot results of trained model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import SIR_gen_util as gt\n",
    "importlib.reload(gt)\n",
    "\n",
    "def dnn(x, y, d, f=model):\n",
    "    l = np.array(gt.test_statistic(x, y, d))\n",
    "    I = np.array([l, x, y]).T\n",
    "    X = torch.Tensor(I)\n",
    "    \n",
    "    # go to evaluation mode\n",
    "    model.eval()\n",
    "    \n",
    "    # compute,reshape to a 1d array, and convert to a numpy array\n",
    "    Y = model(X).view(-1,).detach().numpy()\n",
    "    if len(Y) == 1:\n",
    "        return Y[0]\n",
    "    else:\n",
    "        return Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "load model: SIR_dnn_quantile.dict\n"
     ]
    }
   ],
   "source": [
    "Load_model = True\n",
    "print('load model: %s' % modelfile)\n",
    "\n",
    "if Load_model:\n",
    "    modeldict = torch.load(modelfile)\n",
    "    NN.model.load_state_dict(modeldict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "device: cpu\n",
      "alpha:      0.396, beta:      0.210*5.0e-03, min(fun):      0.111\n",
      "                   beta:      0.00105\n",
      "saved to file: ../images/fig_SIR_dnn_quantile.pdf\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import SIR_dnn_util as ut\n",
    "importlib.reload(ut)\n",
    "\n",
    "SIRdata.O = SIRdata.D\n",
    "res = ut.best_fit(ut.nll, dnn, SIRdata)\n",
    "\n",
    "ut.plot_model(test_data, SIRdata, dnn, res, hist=hist,\n",
    "              filename='../images/fig_%s.pdf' % NN.name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cdf(x, y, z):\n",
    "    X = np.array([x, y, z]).T\n",
    "    inputs = torch.Tensor(X)\n",
    "    # go to evaluation mode\n",
    "    model.eval()\n",
    "    \n",
    "    # compute,reshape to a 1d array, and convert to a numpy array\n",
    "    Y = model(inputs).view(-1,).detach().numpy()\n",
    "    if len(Y) == 1:\n",
    "        return Y[0]\n",
    "    else:\n",
    "        return Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13632"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "select = cdf(test_data.alpha, test_data.beta, test_data.l0) <= 0.95\n",
    "CL95   = test_data[['alpha', 'beta', 'i']][select]\n",
    "CL95.to_csv('../data/SIR_CL95.csv.gz', index=False, compression='gzip')\n",
    "len(CL95)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "DRL_19_REINFORCE_Algorithm.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
