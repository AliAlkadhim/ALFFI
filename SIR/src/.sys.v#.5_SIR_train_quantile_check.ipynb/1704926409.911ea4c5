{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "40Yb47zJQglm"
   },
   "source": [
    "# Simulation-Based Inference SIR Model: Coverage Study\n",
    "Created: June 8, 2022 Prosper, Prosper, and Ali Kadhim<br>\n",
    "\n",
    "## Introduction \n",
    "\n",
    "In this notebook, we compute through explicit enumeration the coverage of the confidence sets constructed using model __SIR_dnn_cdf_NNNk.py__ (e.g., NNN=100).\n",
    "\n",
    "Recall that our test statistic is\n",
    "\n",
    "\\begin{align}\n",
    "    \\lambda(\\theta, \\mathbf{x}) & = \\sqrt{\\frac{1}{n} \\sum_{j=1}^n \\frac{[x_j - I_j(\\theta)]^2}{I_j}} ,\n",
    "\\end{align}\n",
    "\n",
    "where $\\mathbf{x} = x_1,\\cdots,x_n$ are infection counts and $I_j = I(t_j, \\theta)$ is the *mean* infection count at time $t_j$ found by solving the SIR equations\n",
    "\n",
    "\\begin{align}\n",
    "    \\frac{dS}{dt} & = - \\beta S I ,\\\\\n",
    "    \\frac{dI}{dt} & = \\beta S I - \\alpha I .\n",
    "\\end{align}\n",
    "\n",
    "Confidence sets are created through the repeated application of the level-$\\alpha$ test $H_0: \\theta = \\theta_0$ versus the alternative $H_1: \\theta \\neq \\theta_0$.\n",
    "A __confidence set__ $R({\\cal D})$, which is a random set by virtue of its dependence on potentially observable data ${\\cal D}$, is the set of all values of $\\theta$ that *fail to be rejected* by the level-$\\alpha$ tests (here $\\alpha$ is not to be confused with the SIR parameter).  The __confidence level__ (CL) of the confidence set is $\\tau = 1 - \\alpha$. If the coverage probability function (CPF), that is, the coverage probability of the infinite collection of confidence sets at a given point $\\theta$ in the parameter space, satisfies the condition $\\text{CPF}(\\theta \\in R({\\cal D}) | \\theta) \\ge \\tau$ then the confidence sets are said to be *exact*; otherwise they are approximate.\n",
    "\n",
    "\n",
    "## Explicit checking of coverage\n",
    "\n",
    "The notebook SIR_train_amortized_cdf.ipynb creates a model $M(\\alpha, \\beta, \\lambda_0)$ that approximates $\\mathbb{P}(\\lambda \\leq \\lambda_0|\\alpha, \\beta, \\lambda_0)$.  The figure below shows \n",
    "the SIR confidence sets, for different confidence levels, for the Boarding School data. The dashed contours are estimated through histogramming, while the continuous contours are the predictions of the simple deep neural network model $M(\\alpha, \\beta, \\lambda_0)$. \n",
    "\n",
    "![model comparison](fig_SIR_dnn_amortized_cdf_3_50_50_50_1_ReLU.png)\n",
    "\n",
    "### Coverage Algorithm\n",
    "We compute the coverage, through explicit enumeration, with algorithm below.\n",
    "  1. Sample $\\theta_i = (\\alpha_i, \\beta_i) \\sim \\pi_\\theta$ near the best fit point (specifically, within the 95\\% CL confidence set for the Boarding School data).\n",
    "  1. Compute the mean infection counts $\\mathbf{I}_i = (I_1,\\ldots, I_n)$ by solving the coupled ODEs.\n",
    "  1. Generate data $\\mathbf{D}_i = (x_1,\\ldots,x_n) \\sim F_{\\theta_i}$ for $K$ epidemics.\n",
    "  1. Sample confidence level $\\tau_i \\sim \\text{uniform(0.5, 1)}$\n",
    "  1. For each epidemic, $k$:\n",
    "      1. Compute the test statistic $\\lambda_{k} = \\lambda(\\theta_i, \\mathbf{D}_k)$\n",
    "      1. Compute $Z_k = \\mathbb{I}[\\, M(\\theta_i, \\lambda_k) \\leq \\tau_i\\, ]$, where $\\mathbb{I}$ is the indicator function. If $Z_k = 1$ then the point $\\theta_i$ lies within the confidence set, with confidence level $\\tau$, associated with the current epidemic, while if $Z_k = 0$ the point does not.\n",
    "  1. Compute fraction $f_i = \\text{sum}(Z) / K$, that is, the fraction of the time $\\theta_i$ was within the confidence set.\n",
    "  1. If $f_i \\approx \\tau_i$ then life is good!\n",
    "  1. Repeat the above many times."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "FA1Y5VCv20XZ"
   },
   "outputs": [],
   "source": [
    "import os, sys\n",
    "sys.path.append('../')\n",
    "\n",
    "# the standard module for tabular data\n",
    "import pandas as pd\n",
    "\n",
    "# the standard module for array manipulation\n",
    "import numpy as np\n",
    "\n",
    "# the standard modules for high-quality plots\n",
    "import matplotlib as mp\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# standard scientific python module\n",
    "import scipy as sp\n",
    "import scipy.stats as st\n",
    "import scipy.optimize as op\n",
    "\n",
    "# pytorch\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "# to reload modules\n",
    "import importlib\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# update fonts\n",
    "FONTSIZE = 18\n",
    "font = {'family' : 'serif',\n",
    "        'weight' : 'normal',\n",
    "        'size'   : FONTSIZE}\n",
    "mp.rc('font', **font)\n",
    "\n",
    "# set usetex = False if LaTex is not \n",
    "# available on your system or if the \n",
    "# rendering is too slow\n",
    "mp.rc('text', usetex=True)\n",
    "\n",
    "# set a seed to ensure reproducibility\n",
    "#seed = 128\n",
    "#rnd  = np.random.RandomState(seed)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load SIR data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " D           : [  3  25  75 227 296 258 236 192 126  71  28  11   7]\n",
      " I0          : 3\n",
      " O           : [  3  25  75 227 296 258 236 192 126  71  28  11   7]\n",
      " R0          : 0\n",
      " S0          : 763\n",
      " T           : [ 0  2  3  4  5  6  7  8  9 10 11 12 13]\n",
      " alpha0      : 0.465\n",
      " alpha_bins  : 16\n",
      " alpha_max   : 1.0\n",
      " alpha_min   : 0.0\n",
      " alpha_scale : 1.0\n",
      " beta0       : 0.00237\n",
      " beta_bins   : 16\n",
      " beta_max    : 0.7\n",
      " beta_min    : 0.2\n",
      " beta_scale  : 0.005\n",
      " model       : SIR\n",
      " scale       : 50\n",
      " tmax        : 14.0\n",
      " tmin        : 0.0\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from SIR_gen_util import SIRdata\n",
    "print(SIRdata)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load cdf model \n",
    "\n",
    "The model, $M$, approximates the probability\n",
    "\n",
    "\\begin{align}\n",
    "    \\mathbb{P}(\\lambda \\leq \\lambda_0 | \\alpha, \\beta) & = M(\\alpha, \\beta, \\lambda_0).\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "__pycache__  SIR_dnn_cdf_100k.py  SIR_dnn_cdf_800K.py  SIR_dnn_quantile.py\r\n"
     ]
    }
   ],
   "source": [
    "! ls ../models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "sys.path.append('../models')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\n",
      "name     = 'SIR_dnn_quantile'\r\n",
      "features = ['alpha', 'beta', 'tau']\r\n",
      "target   = 'lo'\r\n",
      "nodes    = 25\r\n",
      "\r\n",
      "import torch\r\n",
      "import torch.nn as nn\r\n",
      "\r\n",
      "model = nn.Sequential(nn.Linear( len(features), nodes),\r\n",
      "                      nn.ReLU(),\r\n",
      "                      \r\n",
      "                      nn.Linear(nodes, nodes),\r\n",
      "                      nn.ReLU(),\r\n",
      "                      \r\n",
      "                      nn.Linear(nodes, nodes),\r\n",
      "                      nn.ReLU(), \r\n",
      "                      \r\n",
      "                      nn.Linear(nodes, nodes),\r\n",
      "                      nn.ReLU(),                    \r\n",
      "                      \r\n",
      "                      nn.Linear(nodes, nodes),\r\n",
      "                      nn.ReLU(), \r\n",
      "                      \r\n",
      "                      nn.Linear(nodes, nodes),\r\n",
      "                      nn.ReLU(),                    \r\n",
      "                      \r\n",
      "                      nn.Linear(nodes, 1)\r\n",
      "                     ) \r\n"
     ]
    }
   ],
   "source": [
    "! cat ../models/SIR_dnn_quantile.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name:  SIR_dnn_quantile\n",
      "Model:\n",
      "Sequential(\n",
      "  (0): Linear(in_features=3, out_features=25, bias=True)\n",
      "  (1): ReLU()\n",
      "  (2): Linear(in_features=25, out_features=25, bias=True)\n",
      "  (3): ReLU()\n",
      "  (4): Linear(in_features=25, out_features=25, bias=True)\n",
      "  (5): ReLU()\n",
      "  (6): Linear(in_features=25, out_features=25, bias=True)\n",
      "  (7): ReLU()\n",
      "  (8): Linear(in_features=25, out_features=25, bias=True)\n",
      "  (9): ReLU()\n",
      "  (10): Linear(in_features=25, out_features=25, bias=True)\n",
      "  (11): ReLU()\n",
      "  (12): Linear(in_features=25, out_features=1, bias=True)\n",
      ")\n",
      "['alpha', 'beta', 'tau']\n",
      "load: SIR_dnn_quantile.dict\n"
     ]
    }
   ],
   "source": [
    "import models.SIR_dnn_quantile as NN\n",
    "importlib.reload(NN)\n",
    "\n",
    "fold  = ''\n",
    "name  = NN.name\n",
    "model = NN.model\n",
    "\n",
    "print('Name: ', name)\n",
    "print('Model:')\n",
    "print(model)\n",
    "print(NN.features)\n",
    "\n",
    "modelfile = '%s.dict' % name\n",
    "print('load:', modelfile)\n",
    "model.load_state_dict(torch.load(modelfile))\n",
    "\n",
    "def quantile(alpha, beta, tau):\n",
    "    if type(tau)==type(float):\n",
    "        \n",
    "    X = np.array([alpha, beta, tau]).T\n",
    "    inputs = torch.Tensor(X)\n",
    "    # go to evaluation mode\n",
    "    model.eval()\n",
    "    \n",
    "    # compute,reshape to a 1d array, and convert to a numpy array\n",
    "    Y = model(inputs).view(-1,).detach().numpy()\n",
    "    if len(Y) == 1:\n",
    "        return Y[0]\n",
    "    else:\n",
    "        return Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=np.array(0.8)\n",
    "type(0.6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Study\n",
    "For each point $\\theta = \\alpha, \\beta$ randomly choose a confidence level $\\tau$ determine the fraction of the time the test statistics yield a confidence set that includes $\\theta$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alpha</th>\n",
       "      <th>beta</th>\n",
       "      <th>l</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.515374</td>\n",
       "      <td>0.490942</td>\n",
       "      <td>[0.026923867237551094, 0.080357968198306, 0.01...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.447310</td>\n",
       "      <td>0.566963</td>\n",
       "      <td>[0.03919273462108729, 0.020078406626004477, 0....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.636584</td>\n",
       "      <td>0.526598</td>\n",
       "      <td>[0.06104277253195194, 0.039168254312841745, 0....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.315896</td>\n",
       "      <td>0.366369</td>\n",
       "      <td>[0.05353438554726757, 0.020809563281201884, 0....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.499624</td>\n",
       "      <td>0.354600</td>\n",
       "      <td>[0.08851203191960628, 0.02607256422172975, 0.0...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      alpha      beta                                                  l\n",
       "0  0.515374  0.490942  [0.026923867237551094, 0.080357968198306, 0.01...\n",
       "1  0.447310  0.566963  [0.03919273462108729, 0.020078406626004477, 0....\n",
       "2  0.636584  0.526598  [0.06104277253195194, 0.039168254312841745, 0....\n",
       "3  0.315896  0.366369  [0.05353438554726757, 0.020809563281201884, 0....\n",
       "4  0.499624  0.354600  [0.08851203191960628, 0.02607256422172975, 0.0..."
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df    = pd.read_csv('../data/SIR_coverage_data.csv.gz')\n",
    "df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.06253655463948275\n",
      "number of parameter points, sample size: 249, 4000\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alpha</th>\n",
       "      <th>beta</th>\n",
       "      <th>l</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.515374</td>\n",
       "      <td>0.490942</td>\n",
       "      <td>[0.026923867237551094, 0.080357968198306, 0.01...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.447310</td>\n",
       "      <td>0.566963</td>\n",
       "      <td>[0.03919273462108729, 0.020078406626004477, 0....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.636584</td>\n",
       "      <td>0.526598</td>\n",
       "      <td>[0.06104277253195194, 0.039168254312841745, 0....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.315896</td>\n",
       "      <td>0.366369</td>\n",
       "      <td>[0.05353438554726757, 0.020809563281201884, 0....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.499624</td>\n",
       "      <td>0.354600</td>\n",
       "      <td>[0.08851203191960628, 0.02607256422172975, 0.0...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      alpha      beta                                                  l\n",
       "0  0.515374  0.490942  [0.026923867237551094, 0.080357968198306, 0.01...\n",
       "1  0.447310  0.566963  [0.03919273462108729, 0.020078406626004477, 0....\n",
       "2  0.636584  0.526598  [0.06104277253195194, 0.039168254312841745, 0....\n",
       "3  0.315896  0.366369  [0.05353438554726757, 0.020809563281201884, 0....\n",
       "4  0.499624  0.354600  [0.08851203191960628, 0.02607256422172975, 0.0..."
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alpha = df['alpha'].to_numpy()\n",
    "beta  = df['beta'].to_numpy()\n",
    "li    = np.array([eval(x) for x in df.l])\n",
    "N, K  = li.shape\n",
    "\n",
    "print(li.mean())\n",
    "print('number of parameter points, sample size: %d, %d' % (N, K))\n",
    "df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.32738888, 0.30798012, 0.47403556, 0.26450205, 0.35403538,\n",
       "       0.3067005 , 0.6147465 , 0.2767694 , 0.26804036, 0.25250253,\n",
       "       0.362931  , 0.27860844, 0.26901132, 0.26572424, 0.49693024,\n",
       "       0.4098422 , 0.2701056 , 0.34974343, 0.25987715, 0.6653115 ,\n",
       "       0.2684727 , 0.25653866, 0.3337637 , 0.28991503, 0.3733221 ,\n",
       "       0.27588126, 0.50700927, 0.34153625, 0.30959153, 0.2656213 ,\n",
       "       0.6493085 , 0.27193597, 0.4794122 , 0.31034422, 0.26891783,\n",
       "       0.43272376, 0.5426643 , 0.26556477, 0.4577725 , 0.27286384,\n",
       "       0.2709336 , 0.29472515, 0.3851697 , 0.2612975 , 0.48755133,\n",
       "       0.5233234 , 0.55963963, 0.31487012, 0.34905183, 0.26580435,\n",
       "       0.33105218, 0.46587527, 0.37860373, 0.48071182, 0.26981875,\n",
       "       0.2644761 , 0.2707827 , 0.46150655, 0.38068467, 0.60120744,\n",
       "       0.2585337 , 0.26936772, 0.29950792, 0.32293588, 0.29399315,\n",
       "       0.37145853, 0.25637686, 0.2512547 , 0.36813015, 0.47343892,\n",
       "       0.26535308, 0.2870474 , 0.44767404, 0.6307322 , 0.33066022,\n",
       "       0.25540647, 0.26446575, 0.5051019 , 0.36453617, 0.48001695,\n",
       "       0.2894218 , 0.3313372 , 0.4729033 , 0.2722243 , 0.64508665,\n",
       "       0.34812427, 0.41767114, 0.27251604, 0.291138  , 0.25396386,\n",
       "       0.5210545 , 0.5660892 , 0.40943897, 0.2972703 , 0.5339506 ,\n",
       "       0.49258548, 0.2802537 , 0.4769544 , 0.38970584, 0.36398453,\n",
       "       0.2666602 , 0.36837822, 0.28190136, 0.2900618 , 0.29833618,\n",
       "       0.42337978, 0.3981018 , 0.42371923, 0.25952017, 0.363558  ,\n",
       "       0.44774592, 0.322567  , 0.42409486, 0.33128524, 0.49318558,\n",
       "       0.30061287, 0.5451324 , 0.29255322, 0.25868082, 0.6894994 ,\n",
       "       0.28124678, 0.40693825, 0.27462855, 0.25860608, 0.41606092,\n",
       "       0.27044308, 0.2943793 , 0.27814212, 0.29922655, 0.31766057,\n",
       "       0.34054863, 0.2595822 , 0.28681985, 0.25326315, 0.28648135,\n",
       "       0.28397012, 0.588354  , 0.2577722 , 0.37647438, 0.6048436 ,\n",
       "       0.26897258, 0.33686537, 0.31505007, 0.3584832 , 0.29142457,\n",
       "       0.6538155 , 0.34631473, 0.56347966, 0.27220687, 0.27087173,\n",
       "       0.41656202, 0.26730394, 0.25857067, 0.3665746 , 0.59350187,\n",
       "       0.26279074, 0.26305714, 0.25206238, 0.324044  , 0.31012842,\n",
       "       0.4820032 , 0.5780664 , 0.2826692 , 0.27548057, 0.4273765 ,\n",
       "       0.30695978, 0.67538196, 0.30270994, 0.33083326, 0.3401376 ,\n",
       "       0.27436674, 0.26382262, 0.26165196, 0.26175895, 0.30738714,\n",
       "       0.44295752, 0.297674  , 0.32917553, 0.303522  , 0.25843987,\n",
       "       0.27166253, 0.26375598, 0.2926669 , 0.29778463, 0.25771728,\n",
       "       0.30014145, 0.25596792, 0.40039238, 0.33280435, 0.304451  ,\n",
       "       0.260828  , 0.27001026, 0.26653394, 0.2792406 , 0.2848345 ,\n",
       "       0.5859644 , 0.26772025, 0.26314092, 0.2997515 , 0.31863183,\n",
       "       0.25355735, 0.33020103, 0.5316573 , 0.2555383 , 0.26034856,\n",
       "       0.44137877, 0.48575455, 0.37515473, 0.28123593, 0.4598332 ,\n",
       "       0.6373749 , 0.25959566, 0.26942474, 0.28707704, 0.2715236 ,\n",
       "       0.28635156, 0.38966697, 0.26486224, 0.3608175 , 0.36369857,\n",
       "       0.5313264 , 0.27616757, 0.29768115, 0.36147773, 0.62517303,\n",
       "       0.28575554, 0.3273412 , 0.26213437, 0.41848332, 0.26730257,\n",
       "       0.26050356, 0.27852044, 0.438677  , 0.44647115, 0.62626714,\n",
       "       0.26605126, 0.27506202, 0.2573622 , 0.35027242, 0.32235175,\n",
       "       0.3599807 , 0.5293171 , 0.5362208 , 0.25570595, 0.25511757,\n",
       "       0.45500177, 0.4872691 , 0.32820854, 0.2686531 ], dtype=float32)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "quantile(alpha, beta, np.full_like(alpha,0.68))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_coverage(cdf, l, alpha, beta, tau=0.683):\n",
    "    # N: number of parameter points\n",
    "    # K: number of data instances / parameter point\n",
    "    N, K = l.shape\n",
    "    cov  = [0] * N\n",
    "    ecov = [0] * N\n",
    "    for j, x, y in zip(range(N), alpha, beta):\n",
    "        x = np.full((K), x)\n",
    "        y = np.full((K), y)\n",
    "        p = quantile(x, y, tau)\n",
    "\n",
    "        # compute coverage\n",
    "        cov[j]  = np.mean(p <= tau)\n",
    "        ecov[j] = np.sqrt(cov[j]*(1 - cov[j])/K)\n",
    "    return cov, ecov"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.683\n",
      "0.8\n",
      "0.9\n",
      "0.95\n",
      "done!\n"
     ]
    }
   ],
   "source": [
    "N   = len(li)\n",
    "l   = np.array(li)\n",
    "cov = []\n",
    "for t in [0.683, 0.80, 0.90, 0.95]:\n",
    "    print(t)\n",
    "    c, e = compute_coverage(cdf, l[:N], alpha[:N], beta[:N], t)\n",
    "    cov.append((t, c, e))\n",
    "print('done!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_coverage(x, y, N, cov, d, \n",
    "                  filename='../images/fig_SIR_coverage.png', \n",
    "                         fgsize=(10, 5), ftsize=18):\n",
    "\n",
    "    fig, axx = plt.subplots(nrows=1, ncols=2, figsize=fgsize)\n",
    "    \n",
    "    # pad\n",
    "    #plt.subplots_adjust(hspace=0.01)\n",
    "    #plt.subplots_adjust(wspace=0.3)\n",
    "\n",
    "    # plot points in coverage set that have been used.\n",
    "    ax = axx[0]\n",
    "    xmin, xmax = d.xmin, d.xmax\n",
    "    ymin, ymax = d.ymin, d.ymax\n",
    "    \n",
    "    ax.set_xlim(xmin, xmax)\n",
    "    ax.set_xticks([0.2, 0.4, 0.6, 0.8])\n",
    "    ax.set_xlabel(r'$%s$' % d.xlabel, fontsize=ftsize)\n",
    "    \n",
    "    ax.set_ylim(ymin, ymax)\n",
    "    ax.set_yticks([0.3, 0.4, 0.5, 0.6])\n",
    "    ax.set_ylabel(r'$%s$' % d.ylabel, fontsize=ftsize)\n",
    "    \n",
    "    ax.scatter(x[:N], y[:N], \n",
    "               s=2, c='black', #alpha=0.7, \n",
    "               label='95\\% CL set')\n",
    "    ax.legend(fontsize=ftsize)\n",
    "    ax.grid()\n",
    "    \n",
    "    # plot coverage versus parameter point\n",
    "    tau, c, ec = cov[0]\n",
    "    xmin = 0\n",
    "    xmax = len(c)\n",
    "    p  = np.arange(0, xmax, 1)\n",
    "    ax = axx[1]\n",
    "    ax.set_xlim(xmin, xmax)\n",
    "    ax.set_xticks(np.arange(0, N, 100))\n",
    "    ax.set_xlabel('parameter point', fontsize=ftsize)\n",
    "    \n",
    "    ax.set_ylim(0.5, 1)\n",
    "    ax.set_yticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n",
    "    ax.set_ylabel('coverage', fontsize=ftsize)\n",
    "    \n",
    "    color = ['red', 'darkorange', 'royalblue', 'darkgreen']\n",
    "    for kolor, (tau, c, ec) in zip(color, cov):\n",
    "        ax.scatter(p, c, s=2, c=kolor)\n",
    "        ax.plot([xmin, xmax], [tau, tau], c=kolor, linewidth=2)\n",
    "\n",
    "    ax.grid() \n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.savefig(filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gfile = '../images/fig_SIR_coverage.pdf'\n",
    "SIRdata.xmin = SIRdata.alpha_min\n",
    "SIRdata.xmax = SIRdata.alpha_max\n",
    "SIRdata.xlabel = '\\\\alpha'\n",
    "\n",
    "SIRdata.ymin = SIRdata.beta_min\n",
    "SIRdata.ymax = SIRdata.beta_max\n",
    "SIRdata.ylabel = '\\\\beta'\n",
    "\n",
    "plot_coverage(alpha, beta, N, cov, SIRdata, filename=gfile)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "DRL_19_REINFORCE_Algorithm.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
